# Generated by Django 3.1.3 on 2020-11-12 18:49
import os
import core.validators
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.utils import timezone
from django.contrib.auth import get_user_model

def create_plans(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    Plan = apps.get_model("core", "Plan")
    basic_plan = Plan(
        name="Basic",
        thumbnail_heights=[200]
    )
    basic_plan.save()
    premium_plan = Plan(
        name="Premium", 
        is_link_to_original_provided=True,
        thumbnail_heights=[200, 400]
    )
    premium_plan.save()
    enterprise_plan = Plan(
        name="Enterprise", 
        thumbnail_heights=[200, 400],
        is_link_to_original_provided=True, 
        is_expiring_link_generation_provided=True
    )
    enterprise_plan.save()

def create_superuser(apps, schema_editor):
    superuser = get_user_model()(
        is_active=True,
        is_superuser=True,
        is_staff=True,
        username="Admin",
        email="Admin@gmail.com",
        last_login=timezone.now(),
        plan_id=1
    )
    superuser.set_password("Admin_password")
    superuser.save()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ExpiringLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='universally unique identifiers for expiring links')),
                ('link_to_image', models.URLField(verbose_name='link to image')),
                ('created_at', models.DateTimeField()),
                ('expired_at', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'expiring_link',
                'verbose_name_plural': 'expiring_links',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='name of plan')),
                ('thumbnail_heights', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=200, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)], verbose_name='height in pixels'), size=1000)),
                ('is_link_to_original_provided', models.BooleanField(default=False, verbose_name='is a link to originally uploaded image provided by the plan')),
                ('is_expiring_link_generation_provided', models.BooleanField(default=False, verbose_name='is expiring link generation provided by the plan')),
            ],
            options={
                'verbose_name': 'plan',
                'verbose_name_plural': 'plans',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(max_length=50, upload_to='static/images', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['PNG', 'JPG']), core.validators.validate_file_size], verbose_name='image link')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'image',
                'verbose_name_plural': 'images',
                'ordering': ['image'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='plan',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.plan', verbose_name='plan'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.RunPython(create_plans),
        migrations.RunPython(create_superuser)
    ]
